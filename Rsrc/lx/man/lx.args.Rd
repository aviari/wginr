% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lx.language.r
\name{lx.args}
\alias{lx.args}
\title{get function actual arguments}
\usage{
lx.args(pos = NULL, up.frame = 0L)
}
\arguments{
\item{pos}{position of argument to extract. if NULL returns all arguments, including
function name at pos=1. you can retrieve all arguments but function name
by using pos=-1.}

\item{up.frame, }{number of frame to go up to get caller. default (up=0)
means to retrieve arguments from the function calling \code{lx.args};
up=1 means the function calling the function calling \code{lx.args}
and so on up to top level.}
}
\value{
named list of actual (unevaluated) arguments\cr
or NULL if called from top-level
}
\description{
get list of actual arguments of function call.
this is mostly useful to 1) retrieve arguments from function with
undefined number of arguments and 2) to retrieve actual arguments
as symbols (instead of values).
this should be called within a function (not from top level).
returned arguments are not evaluated but are returned
as symbols, constants or language expression.
}
\note{
pos is the position of argument i.e as declared in the function definition
not in the function call.

avoid calling \code{lx.args} as an argument of another function
unless you are sure when/where it will actually be evaluated.

don't confuse this function with \link{lx.getargs} that handle command line arguments.
}
\examples{
foo <- function(...) {
  args <- lx.args(-1)
  print(args)
}
foo(first=1, second=anything, "third", FUN=function(x) x+1)

foo <- function() {
  caller <- lx.args(1, 1)[[1]]
  cat("foo caller is:", caller, "\\n")
}
bar <- function() foo()
bar()

}
