% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lx.language.r
\name{lx.binsum}
\alias{lx.binsum}
\title{binned sum}
\usage{
lx.binsum(x, k, drop = FALSE)
}
\arguments{
\item{x}{vector}

\item{k}{number of consecutive elements to sum (k >= 1)}

\item{drop}{drop the last element of result if length(x) is not a multiple
of k.}
}
\value{
vector of size ceiling(length(x) / k) if drop=FALSE or
floor(length(x) / k) if drop=TRUE, containing the
sum of k consecutive elements.
}
\description{
compute the jumping sum of k consecutive elements in vector.
this is equivalent to
\code{sapply(seq.int(1,length(x),by=k), function(i) sum(x[i:(i+(k-1))], na.rm=T))}
but is quicker.
}
\note{
if drop=FALSE and length(x) is not a multiple of k 
the last element will sum up less than k elements.
}
\examples{
lx.binsum(1:10, 2)                 # => 3 7 11 15 19
lx.binsum(rep(1,10), 3)            # => 3 3 3 1
lx.binsum(rep(1,10), 3, drop=TRUE) # => 3 3 3
}
\seealso{
\link{lx.rollsum} for a rolling (instead of jumping) version
}
