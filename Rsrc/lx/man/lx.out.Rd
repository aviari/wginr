% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lx.logging.r
\name{lx.out}
\alias{lx.out}
\title{printout information on stderr}
\usage{
lx.out(..., level = "info", with.mem = FALSE, with.caller = TRUE,
  up.frame = 0L)
}
\arguments{
\item{...}{zero or more objects which can be coerced to character 
(and which are pasted together with no separator).}

\item{level}{verbose level.}

\item{with.mem}{if TRUE, additionaly printout memory usage}

\item{with.caller}{if TRUE, additionaly printout caller}

\item{up.frame}{if with.caller==TRUE, caller position in call stack (see details).}
}
\description{
prints arguments on stderr if \code{level >= lx.verbose()}
}
\details{
if \code{with.mem} = TRUE this fonction will calls \code{gc()}, and
may therefore slow down process.\cr

the \code{up.frame} parameter indicates the number of frames to go up to
get caller. default (up=0) means to retrieve arguments from the function
calling \code{lx.out}; up=1 means the function calling the function
calling \code{lx.out} and so on up to top level.\cr

the \code{up.frame} parameter is useful if you called \code{lx.out} from
an error reporting function and want to report the caller function
(see examples below)
}
\examples{
lx.out("pi=", pi, " and e=", exp(1))
lx.out("pi=", pi, " and e=", exp(1), with.mem=TRUE)

my_report <- function(...) lx.out("my report: ", ..., up.frame=1)
foo <- function() { x <- 1; my_report("x=", x) }
foo()
}
\seealso{
\link{lx.verbose} \link{lx.warn}, \link{lx.warnif}, \link{lx.stopif}
}
