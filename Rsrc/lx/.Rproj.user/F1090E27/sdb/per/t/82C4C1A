{
    "collab_server" : "",
    "contents" : "# -------------------------------------------------\n# $Id: lx.osutil.r 120 2016-10-29 07:45:45Z viari $\n# lx OS utilities\n#\n\n# =================================================\n# RScript / R CMD Batch utilities\n#\n\n# -------------------------------------------------\n#' commandArgs parsing\n#' @author Chris Wallace\n#' @description\n#' return a named list of command line arguments\n#'\n#' Usage:\n#' call the R script as\\cr\n#'   ./myfile.R --args myarg=something\\cr\n#' or\\cr\n#'   R CMD BATCH --args myarg=something myfile.R\\cr\n#'\n#' Then in R do\\cr\n#'   myargs <- getArgs()\\cr\n#' to retrieve a named list of arguments\n#'\n#' @param verbose print verbage to screen \n#' @param defaults a named list of defaults, optional\n#' @return a named list\n#' @note\n#' don't confuse this function with \\link{lx.args} that handle function arguments.\n#' @note\n#' Borrowed from : http://cwcode.wordpress.com/2013/04/16/the-joys-of-rscript/\n#'\nlx.getargs <- function(verbose=FALSE, defaults=NULL) {\n  myargs <- gsub(\"^--\", \"\", commandArgs(TRUE))\n  setopts <- !grepl(\"=\", myargs)\n  if (any(setopts))\n    myargs[setopts] <- paste0(myargs[setopts], \"=notset\")\n  myargs.list <- strsplit(myargs, \"=\")\n  myargs <- lapply(myargs.list, \"[[\", 2 )\n  names(myargs) <- lapply(myargs.list, \"[[\", 1)\n  \n  ## logicals\n  if (any(setopts))\n    myargs[setopts] <- TRUE\n  \n  ## defaults\n  if (!is.null(defaults)) {\n    defs.needed <- setdiff(names(defaults), names(myargs))\n    if (length(defs.needed)) {\n      myargs[defs.needed] <- defaults[defs.needed]\n    }\n  }\n  \n  ## verbage\n  if (verbose) {\n    cat(\"read\",length(myargs),\"named args:\\n\")\n    print(myargs)\n  }\n  myargs\n}\n\n# =================================================\n# OS utilities\n#\n\n# -------------------------------------------------\n#' wrapper to \\link{Sys.info}\n#' @description get system and user information\n#' @param ... 0 or more keys to \\link{Sys.info} (if empty, then\n#'            return all entries)\n#' @return a (possibly empty) vector of entries of \\link{Sys.info}\n#' @note result may be NULL if \\link{Sys.info} is not implemented\n#' @examples\n#' x <- lx.sysinfo()\n#' x <- lx.sysinfo('user', 'machine')\n#\nlx.sysinfo <- function(...) {\n  info <- Sys.info()\n  if (! is.null(info)) {\n    args <- lx.args(-1)\n    if (length(args) > 0) {\n      args <- unlist(args)\n      info <- info[args]\n      names(info) <- args\n    }\n  }\n  info\n}\n\n# =================================================\n# file utilities\n#\n\n# -------------------------------------------------\n#' filename extension\n#' @param path filename\n#' @return file (name) extension (excluding the leading dot)\n#' @note only purely alphanumeric extensions are recognized\n#' @note borrowed from package tools\n#' @examples\n#' lx.file.ext(\"dir/file.more.ext\")\n#\nlx.file.ext <- function(path) {\n  pos <- regexpr(\"\\\\.([[:alnum:]]+)$\", path)\n  ifelse(pos > -1L, substring(path, pos + 1L), \"\")\n}\n\n# -------------------------------------------------\n#' filename without extension\n#' @param path filename\n#' @return filename without extension (and the leading dot)\n#' @note only purely alphanumeric extensions are recognized\n#' @note borrowed from package tools\n#' @examples\n#' lx.file.no.ext(\"dir/file.more.ext\")\n#\nlx.file.no.ext <- function(path) {\n  sub(\"([^.]+)\\\\.[[:alnum:]]+$\", \"\\\\1\", path)\n}\n\n# -------------------------------------------------\n#' resolve filename\n#' @description resolve filename by trying different\n#' (combinations of) extensions.\n#' @details if \\code{path} has the form \"sys:package:\" then\n#' the file is searched in package system files.\\cr\\cr\n#' if \\code{ext} is a list of character vectors then\n#' extensions from each vector element are catenated \n#' in a 'depth first' way i.e. first element of the first vector\n#' with first of the second ... etc (see examples).\\cr\n#' @param path filename (see details)\n#' @param ext a character vector or list of character vectors containing\n#' extensions to be combined (see details).\n#' @param mode access mode (see \\link{file.access})\n#' @param .verbose printout filenames trials\n#' @param .dedots remove possible double dots in filename\n#' (this may occur if you have included \"\" as an extension (see examples)).\n#' @return actual pathname if a file has matched else NULL\n#' @note only the first matching filename (if any) is returned.\n#' @examples\n#' lx.file.resolve(\"sys:lx:data/lx.iris\", c(\"rds\", \"RData\"))\n#' lx.file.resolve(\"none\", .verbose=TRUE)\n#' lx.file.resolve(\"none\", c(\"\", \"a\", \"b\"), .verbose=TRUE)\n#' lx.file.resolve(\"none\", list(c(\"a\", \"b\"), c(\"\", \"c\", \"d\"), c(\"\", \"e\", \"f\")), .verbose=TRUE)\n#\nlx.file.resolve <- function(path, ext=\"\", mode=0,\n                            .verbose=FALSE, .dedots=TRUE) {\n  \n  # internal check file access\n  #\n  .access <- function(name) {\n     ok <- file.access(name, mode=mode) == 0\n     if (.verbose) lx.out(\"trying file: '\", name,\n                          \"' mode: \", mode,\n                          \" status: \", ok)\n     ok\n  }\n  \n  # null case\n  if (is.null(path)) return(NULL)\n  \n  # convert sys:package:xxx filename\n  #\n  if (grepl(\"^sys:[^:]+:\", path)) {\n    splt <- lx.strsplit(path, \":\")\n    path <- lx.system.file(splt[3], package=splt[2])\n  }\n  \n  # generate extensions\n  #\n  .ext <- function(x) {\n    as.vector(if (length(x) == 0) \"\"\n              else sapply(x[[1]], function(y) paste(y, .ext(x[-1]), sep=\".\")))\n  }\n  ext <- unique(gsub(\"^\\\\.+|\\\\.+$\", \"\", \n                     .ext(if (is.list(ext)) ext else list(ext))))\n\n  # check files\n  #\n  \n  for (e in ext) {\n    npath <- gsub(\"\\\\.+$\", \"\", paste(path, e, sep=\".\"))\n    if (.dedots) npath <- gsub(\"\\\\.\\\\.+([^/])\", \".\\\\1\", npath)\n    if (.access(npath)) return(npath)\n  }\n  \n  # nothing found\n  #\n  NULL\n}\n",
    "created" : 1496820817390.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4038995889",
    "id" : "82C4C1A",
    "lastKnownWriteTime" : 1502796375,
    "last_content_update" : 1502796375101,
    "path" : "~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.osutil.r",
    "project_path" : "R/lx.osutil.r",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}