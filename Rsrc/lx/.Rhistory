typeof(a)
unlist(a)
a=lapply(res, unlist)
dim(a)
length(a)
a
length(a)
head(a)
tail(a)
dim(res)
is.matrix(res)
is.array(res)
is.data.frame(res)
l <- replicate(
132,
list(sample(letters, 20)),
simplify = FALSE
)
l
res
unlist(res)
unlist(res, recursive=F)
res
x
length(x)
dim(x)
res=x0
dim(res)
length(res)
res[1]
res <- do.call(rbind, res)
head(res)
res$area
colnames(res)
a=lapply(res, unlist)
dim(a)
length(a)
?lapply
di(res)
dim(res)
head(res)
a=data.frame(res)
a
a$area
a$name
dim(a)
b=lapply(a, unlist)
dim(b)
length(b)
is.data.frame(iris)
iris
lapply(iris, sum)
lapply(iris[,1:3], sum)
lapply(iris[,1:3], identity)
lapply(iris[,1:3], unlist)
data.frame(lapply(iris, unlist))
a=data.frame(lapply(iris, unlist))
a$Sepal.Length
a=data.frame(lapply(res, unlist))
a
head(a)
dim(res)
head(res)
res=x0
head(res)
length(res)
res <- do.call(rbind, sapply(res, unlist))
res <- do.call(rbind, lapply(res, unlist))
head(res)
res=x0
res <- do.call(rbind, lapply(res, unlist))
head(res)
res=x0
res <- do.call(rbind, res)
res <- as.data.frame(res, stringsAsFactors=F)
head(res)
res$area
res$name
a=res$area
a
typeof(unlist(a))
a=res$name
typeof(unlist(a))
a
head(res)
colnames(res)
?as.data.frame
?rbind
do.call(rbind, NULL)
do.call(rbind, list())
res
is.data.frame(res)
res$area
res=x0
res <- do.call(rbind, res)
res <- as.data.frame(I(res), stringsAsFactors=F)
head(res)
res$x
res$x
names(res)
res <- x0
res
res <- do.call(rbind, res)
res
a=as.list(res)
a
res
dim(a)
y <- do.call(cbind, a)
y
head(y)
di(y)
dim(y)
dim(a)
df=iris
is.list(df)
is.data.frame(df)
df$names
names(df)
colnames(df)
df
df=iris[1:5,]
df
is.list(df)
names(df)
df$Sepal.Length
res
dim(res)
a=res[1,]
a
a=res[2,]
a
res <- as.data.frame(res, stringsAsFactors=F)
head(res)
a=lapply(res, unlist)
length(a)
b=do.call(rbind, a)
dim(b)
head(b)
dim(b)
b=do.call(cbind, a)
dim(b)
head(b)
res=x0
res <- do.call(rbind, res)
res <- as.data.frame(lapply(res, unlist), stringsAsFactors=F)
head(res)
res=x0
res <- do.call(rbind, lapply(res, unlist))
res
res <- as.data.frame(res, stringsAsFactors=F)
res
res$area
res$name
res$area
res
res$area
res
res=x0
res <- do.call(rbind, res)
res <- as.data.frame(res, stringsAsFactors=F)
head(res)
res$area
a <- as.data.frame(lapply(res, unlist))
dim(a)
head(a)
a$area
a$name
?unlist
res=x0
res <- do.call(rbind, res)
res <- as.data.frame(res, stringsAsFactors=F)
res <- as.data.frame(lapply(res, unlist, recursive=F, use.names=F), stringsAsFactors=F)
res
res$area
res$name
names(res)
lx.rowapply <- function(X, FUN, ...,
as.list=FALSE,
SIMPLIFY=TRUE,
pg.verbose=lx.options('pg.verbose'),
use.threads=lx.use.threads(),
mc.cores=lx.options('mc.cores'),
mc.preschedule=TRUE,
mc.allow.recursive=FALSE) {
res <- lx.lapply(seq_len(nrow(X)), function(irow) {
row <- X[irow,]
FUN(row, ...)
}, pg.verbose=pg.verbose, use.threads=use.threads,
mc.cores=mc.cores, mc.preschedule=mc.preschedule,
mc.allow.recursive=mc.allow.recursive)
if (as.list) return(res)
res <- do.call(rbind, res)
res <- as.data.frame(res, stringsAsFactors=F)
res <- as.data.frame(lapply(res, unlist, recursive=F, use.names=F), stringsAsFactors=F)
if (SIMPLIFY && (ncol(res) == 1)) res <- res[,1]
res
}
x <- lx.rowapply(iris, function(x) x$Sepal.Width * x$Sepal.Length)
x
x <- lx.rowapply(iris, function(x) list(area=x$Sepal.Width * x$Sepal.Length, name=as.character(x$Species)))
x
x$name
x <- lx.rowapply(iris, function(x) x$Sepal.Width * x$Sepal.Length, SIMPLIFY=F)
x
x <- lx.rowapply(iris, function(x) list(x$Sepal.Width * x$Sepal.Length, as.character(x$Species)))
head(x)
?as.data.frame
default.stringsAsFactors()
lx.rowapply <- function(X, FUN, ...,
as.list=FALSE,
SIMPLIFY=TRUE,
stringsAsFactors=default.stringsAsFactors(),
pg.verbose=lx.options('pg.verbose'),
use.threads=lx.use.threads(),
mc.cores=lx.options('mc.cores'),
mc.preschedule=TRUE,
mc.allow.recursive=FALSE) {
res <- lx.lapply(seq_len(nrow(X)), function(irow) {
row <- X[irow,]
FUN(row, ...)
}, pg.verbose=pg.verbose, use.threads=use.threads,
mc.cores=mc.cores, mc.preschedule=mc.preschedule,
mc.allow.recursive=mc.allow.recursive)
if (as.list) return(res)
res <- do.call(rbind, res)
res <- as.data.frame(res, stringsAsFactors=stringsAsFactors)
res <- as.data.frame(lapply(res, unlist, recursive=F, use.names=F),
stringsAsFactors=stringsAsFactors)
if (SIMPLIFY && (ncol(res) == 1)) res <- res[,1]
res
}
x <- lx.rowapply(iris, function(x) NULL)
x
lx.rowapply(NULL, identity)
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.apply.r')
lx.rowapply(NULL, identity)
nrow(NULL)
nrow(NULL) != 0
dim(NULL)
length(NULL)
dim(1:10)
dim(df)
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.apply.r')
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.apply.r')
lx.rowapply(NULL, identity)
apply(NULL, 2, identity)
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.apply.r')
x=lx.rowapply(df, function(x) NULL)
x
lx.rowapply(x, identity)
dim(x)
a=lx.rowapply(df, identity)
a
identical(a, df)
x <- lx.rowapply(iris, function(x) x$Sepal.Width * x$Sepal.Length)
identical(x, iris$Sepal.Width * iris$Sepal.Length)
x <- lx.rowapply(iris, function(x) list(area=x$Sepal.Width * x$Sepal.Length, name=as.character(x$Species)))
x
x <- lx.rowapply(iris, function(x) list(area=x$Sepal.Width * x$Sepal.Length, name=x$Species))
x
x$name
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.apply.r')
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.apply.r')
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.apply.r')
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.apply.r')
x=lx.rowapply(NULL)
x=lx.rowapply(df, function(x) NULL)
x
ncol(x)
x[,1]
x[,0]
a=lapply(df, function(x) sum(x))
df
a=lapply(df, function(x) list(mean=mean(x), var=var(x)))
a
a=lapply(df[,1:3], function(x) list(mean=mean(x), var=var(x)))
a
do.call(cbind, a)
a=lapply(df[,1:3], function(x) list(mean=mean(x), var=var(x), nom="a"))
a
do.call(cbind, a)
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.apply.r')
library(lx)
library(lx)
?lx.rowapply
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.apply.r')
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.apply.r')
library(lx)
install.packages("roxygen2")
library(lx)
require(lx)
lx.recycle(1:3, 6)
lx.recycle(1:10, 6)
lx.recycle(1:10, 0)
lx.recycle(NULL, 3)
lx.recycle(1:3, 6)
lx.recycle(1:10, 6)
lx.recycle(1:10, 0)
lx.recycle(NULL, 2)
lx.recycle <- function(x, n) {
if (length(x) == 0) x else head(rep(x, ceiling(n/length(x))), n)
}
lx.recycle(1:3, 6)
lx.recycle(1:10, 6)
lx.recycle(1:10, 0)
lx.recycle(NULL, 2)
lx.recycle(1, 10)
library(lx)
library(lx)
require(lx)
lx.color.fore <- function(color, threshold=0.5, white="white", black="black") {
ifelse(color.lum(col) < threshold, white, black)
}
lx.color.fore(c("black", "white", "red", "yellow"))
lx.color.fore <- function(color, threshold=0.5, white="white", black="black") {
ifelse(lx.color.lum(col) < threshold, white, black)
}
lx.color.fore(c("black", "white", "red", "yellow"))
lx.color.fore <- function(color, threshold=0.5, white="white", black="black") {
ifelse(lx.color.lum(color) < threshold, white, black)
}
lx.color.fore(c("black", "white", "red", "yellow"))
library(lx)
?barplot
plot(1:10)
text(5,5,"toto")
text(5,5,"toto",srt=0)
text(5,5,"toto",srt=90)
library(lx)
lx.barplot(c(apple=10, orange=5, banana=15))
lx.barplot(c(apple=10, orange=5, banana=15), col.text='white', col=lx.COLORS)
lx.barplot(c(apple=10, orange=5, banana=15), col=lx.COLORS)
lx.barplot(c(apple=10, orange=5, banana=15), col=lx.COLORS, srt.text=90)
?text
library(lx)
lx.barplot(c(apple=10, orange=5, banana=15))
lx.barplot(c(apple=10, orange=5, banana=15), col.text='white', col=lx.COLORS)
lx.COLORS
lx.COLORS
library(lx)
library(lx)
require(lx)
library(lx)
lx.barplot(c(apple=10, orange=5, banana=15))
lx.barplot(c(apple=10, orange=5, banana=15), col.text='white', col=lx.COLORS)
lx.barplot(c(apple=10, orange=5, banana=15), col.text='white', col=lx.COLORS, srt.text=90)
lx.barplot(c(apple=10, orange=5, banana=15), col.text='white', col=lx.COLORS, srt.text=90, adj.text=c(0.5, 0.5))
lx.barplot(c(apple=10, orange=5, banana=15), col.text='white', col=lx.COLORS, srt.text=90, adj.text=c(0.5, 1))
lx.barplot(c(apple=10, orange=5, banana=15), col.text='white', col=lx.COLORS, srt.text=90, adj.text=c(0.5, 0))
lx.barplot(c(apple=10, orange=5, banana=15), col.text='white', col=lx.COLORS)
lx.barplot(c(apple=10, orange=5, banana=15), col.text='white', col=lx.COLORS, adj.text=0.5)
lx.barplot(c(apple=10, orange=5, banana=15), col.text='white', col=lx.COLORS, adj.text=0)
lx.barplot(c(apple=10, orange=5, banana=15), col.text='white', col=lx.COLORS, adj.text=0)
lx.barplot(c(apple=10, orange=5, banana=15), col.text='white', col=lx.COLORS, adj.text=0)
x=c(apple=10, orange=5, banana=15)
mid <- x.barplot(x, col.text='white', col=lx.COLORS)
mid <- lx.barplot(x, col.text='white', col=lx.COLORS)
text(mid, x, x)
text(mid, x, x, adj=0)
text(mid, x, x, pos=1)
text(mid, x, x, pos=1, adj=0)
text(mid, x, x, pos=1, adj=0)
text(mid, x, x, pos=1, adj=1)
text(mid, x, x, pos=1, adj=1, col=2)
text(mid, x, x, adj=1, col=2)
text(mid, x, x, adj=0, col=2)
text(mid, x, x, adj=c(0.5, 0.5), col=2)
text(mid, x, x, adj=c(0.5, 0.5), col=3)
text(mid, x, x, adj=c(0.5, 1), col=3)
text(mid, x, x, adj=c(0.5, 2), col=3)
mid <- lx.barplot(x, col.text='white', col=lx.COLORS)
text(mid, x, x, col=2, srt=90, pos=1, offset=0)
text(mid, x, x, col=2, srt=90, pos=1, offset=1)
text(mid, x, x, col=2, srt=90, pos=2, offset=1)
text(mid, x, x, col=2, srt=90, pos=2, offset=0)
library(lx)
require(lx)
lx.barplot(c(apple=10, orange=5, banana=15))
lx.barplot(c(apple=10, orange=0, banana=15))
mid=lx.barplot(c(apple=10, orange=0, banana=15))
mid
c(1,2)==0
identical(c(1,2), 0)
x=c(apple=10, orange=0, banana=15)
par("usr")
ylim <- par("usr")[3:4]
y0 <- mean(par("usr")[3:4])
y0
lx.barplot <- function(x, col=NULL, col.text='black', cex.text=1,
pos.text=NULL, off.text=0.5, srt.text=0, ...) {
mid <- barplot(x, col=col, ...)
if (is.null(pos.text)) {
y0 <- mean(par("usr")[3:4])
pos.text <- ifelse(x < y0, 3, 1)
}
text(mid, x, as.character(x), pos=pos.text, offset=off.text,
col=col.text, cex=cex.text, srt=srt.text)
invisible(mid)
}
lx.barplot(c(apple=10, orange=0, banana=15))
lx.barplot(c(apple=10, orange=5, banana=15), col.text='white', col=lx.COLORS)
lx.color.fore(NULL)
c(lx.color.fore(NULL))
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.plot.r')
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.plot.r')
lx.barplot(c(apple=10, orange=0, banana=15))
lx.barplot(c(apple=10, orange=5, banana=15), col.text='auto', col=lx.COLORS)
lx.barplot(c(apple=10, orange=5, banana=15), col.text='auto', col="yellow")
lx.barplot(c(apple=10, orange=5, banana=15), col.text='auto', col="yellow", srt.text=90)
lx.barplot(c(apple=10, orange=5, banana=15), col.text='auto', col="yellow", srt.text=90, pos.text=2)
lx.barplot(c(apple=10, orange=5, banana=15), col.text='auto', col="yellow", srt.text=90)
lx.barplot(c(apple=10, orange=5, banana=15), col.text='auto', col="yellow", srt.text=90, off.text=1)
lx.barplot(c(apple=10, orange=5, banana=15), col.text='auto', col="yellow", srt.text=90, off.text=1, pos.text=2)
lx.barplot(c(apple=10, orange=5, banana=15), col.text='auto', col="yellow", srt.text=90, off.text=1, pos.text="auto")
lx.barplot(c(apple=10, orange=5, banana=15), col.text='auto', col="yellow", srt.text=90, off.text=1, pos.text=NULL)
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.plot.r')
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.plot.r')
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.plot.r')
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.plot.r')
library(lx)
?lx.barplot
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.plot.r')
lx.barplot(c(apple=10, orange=0, banana=15))
lx.barplot(c(apple=10, orange=5, banana=15))
lx.barplot(c(apple=10, orange=5, banana=15), col.text='auto', col=lx.COLORS)
lx.barplot(c(apple=10, orange=5, banana=15), col=lx.COLORS)
lx.barplot(c(apple=10, orange=5, banana=15), col.text="white", pos.text=1, col=lx.COLORS)
lx.barplot(c(apple=10, orange=5, banana=15), col.text=NULL, pos.text=1, col=lx.COLORS)
lx.barplot(c(apple=10, orange=5, banana=15), col.text=0, pos.text=1, col=lx.COLORS)
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.plot.r')
library(lx)
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.plot.r')
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.plot.r')
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.plot.r')
library(lx)
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.plot.r')
library(lx)
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.plot.r')
library(lx)
a="toto..titi"
npath=a
a
gsub("\\.\\.+", ".", npath)
gsub("\\.\\.+", ".", "toto....titi")
gsub("\\.\\.+", ".", "toto/../titi")
gsub("\\.\\.+[^/]", ".", "toto/../titi")
gsub("\\.\\.+[^/]", ".", "toto..titi")
gsub("\\.\\.+([^/])", ".", "toto..titi")
gsub("\\.\\.+([^/])", ".\1", "toto..titi")
gsub("\\.\\.+([^/])", ".:1", "toto..titi")
gsub("\\.\\.+([^/])", ".\\1", "toto..titi")
gsub("\\.\\.+([^/])", ".\\1", "toto/..titi")
gsub("\\.\\.+([^/])", ".\\1", "toto../titi")
gsub("\\.\\.+([^/])", ".\\1", "../toto..titi")
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.osutil.r')
lx.file.resolve("sys:lx:data/lx.iris", c("rds", "RData"))
require(lxà
require(lx)
lx.file.resolve("sys:lx:data/lx.iris", c("rds", "RData"))
lx.file.resolve("none", .verbose=TRUE)
lx.file.resolve("none", c("", "a", "b"), .verbose=TRUE)
lx.file.resolve("none", list(c("a", "b"), c("", "c", "d"), c("", "e", "f")), .verbose=TRUE)
source('~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/lx/R/lx.osutil.r')
lx.file.resolve("none", .verbose=TRUE)
library(lx)
library(lx)
x=lx.new("people", 1, age=10)
x
library(lx)
?lx.new
require(lx)
varname="toto"
lx.out("you can now use global variable \'", varname, "\'")
lx.out("you can now use global variable '", varname, "'")
library(lx)
library(lx)
?lx
?lx.info
.lx.DIGITS <- c(0:9, letters)
x <- 1:3
lx.info(x) <- "my array"
lx.info(x)
lx.doc(x)
lx.doc(a)
ls()
?get0
library(lx)
?lx.get0
library(lx)
?lx.get0
library(lx)
?lx.get0
library(lx)
library(lx)
require(lx)
lx.peaks
library(lx)
x <- lx.density(c(rnorm(100, -1, 0.3), rnorm(100, 1, 0.3)))
p <- lx.peaks(x$y)
p
plot(x)
abline(v=x$x[p$pos], col=1)
abline(v=x$x[c(p$left, p$right)], col=2)
require(lx)
lx.mixin(list(a=1, c=3), list(a=10, b=20))
lx.mixin(list(a=1, c=3), lin<-list(a=10, b=20), names(lin))
lx.mixin(NULL, lin<-list(a=10, b=20), intersect(names(lin), c("a", "c")))
ll <- list(a=1, b="you", c=1:3)
lx.list2str(ll)
dirname
basename
