{
    "collab_server" : "",
    "contents" : "# -------------------------------------------------\n# $Id: asdog.main.r 322 2017-08-18 11:20:32Z viari $\n# Asdog: Copy Number Analysis for WGS data\n#\n# utilities to help writing main programs\n#\n\n# =================================================\n# internals <no_export>\n# =================================================\n\n.cat <- function(...) {\n  cat(..., '\\n', file=stderr())\n}\n\n.trunc <- function(x, trunclen=30) {\n  lx.strtrunc(lx.strtrim(paste0(format(x), collapse=\" \")), trunclen)\n}\n\n.help.options <- function(category, default) {\n  params <- asdog.filter.params(NULL, in.filter=category, default=default)\n  if (length(params) > 0) {\n    info <- do.call(asdog.info.params, as.list(names(params)))\n    info <- data.frame(info[,c(2,4)])\n    colnames(info) <- c('info', 'default')\n    info$default <- lapply(info$default, .trunc, 30)\n    owidth <- options('width')\n    options(width=160)\n    print(info)\n    options(width=owidth[[1]])\n  }\n  .cat(\"\")\n}\n\n.usage <- function(category=\"\", default, ...) {\n  if (exists('prog.usage')) prog.usage(...)\n  if (category != \"\") {\n    .cat(\"available options:\")\n    .help.options(category, default)\n  } else {\n    .cat(\"use --help to get a list of available options\")\n  }\n}\n\n# =================================================\n# API\n# =================================================\n\n# -------------------------------------------------\n# print help usage\n#\nasdog.main.usage <- function(category=\"\", default=asdog.default.params(), ...) {\n  .usage(category, default, ...)\n  invisible()\n}\n\n# -------------------------------------------------\n# quit program\n#\nasdog.main.exit <- function(status=1, category=\"\", usage=(category != \"\"), \n                            default=asdog.default.params(), ...) {\n  if (usage) .usage(category, default, ...)\n  quit(save=\"no\", status=status)\n}\n\n# -------------------------------------------------\n# handle general user's arguments\n#\nasdog.main.args <- function(category=\"\", default=asdog.default.params()) {\n\n  args <- lx.getargs()\n  dft  <- sapply(default, function(x) x$value)\n\n  .val <- function(key) if (is.null(args[[key]])) dft[[key]] else args[[key]]\n    \n  # --help\n  if ('help' %in% names(args)) {\n    asdog.main.exit(0, category=category, default=default)\n  }\n\n  # --use.threads=<logical>\n  lx.options(use.threads=as.logical(.val(\"use.threads\")))\n  \n  # --mc.cores=<integer>\n  mc.cores <- as.integer(.val(\"mc.cores\"))\n  if (mc.cores <= 0) mc.cores <- parallel::detectCores()\n  lx.options(mc.cores=mc.cores)\n\n  # --verbose=<character> \n  lx.verbose(.val(\"verbose\"))\n\n  # --seed=<integer>\n  seed <- as.integer(.val(\"seed\"))\n  if (seed >= 0) set.seed(seed)\n\n  args\n}\n\n# -------------------------------------------------\n#' get asdog parameters from args and (optionally)\n#' from previous params\n#\nasdog.main.params <- function(args, params=NULL, \n                              default=asdog.default.params()) {\n  \n  # get optional previous params\n  \n  if (is.null(params))\n    params <- sapply(default, function(x) x$value)\n  \n  params <- do.call(asdog.new.params, c(params, as.args=F, default=list(default)))\n\n  # parse args \n  \n  args.params <- do.call(asdog.new.params, c(args, as.args=T, default=list(default)))\n\n  # override previous parameters by args\n\n  for (e in names(args)) {\n    params[[e]] <- args.params[[e]]\n  }\n  \n  params\n}\n\n# -------------------------------------------------\n# setup tex graphic driver\n#\nasdog.tex.driver <- function(params) {\n  \n  driver <- params$report.latex.driver\n  res    <- params$report.driver.res\n  \n  if (driver %in% c('jpeg', 'png', 'tiff'))\n    lx.options(tex.driver.options=list(list(units=\"in\", res=res)))\n  else\n    lx.options(tex.driver.options=list(NULL))\n\n  lx.options(tex.graphics.driver=driver)\n  invisible(driver)\n}\n\n# -------------------------------------------------\n# check file as name name.type name.bgz name.type.bgz \n#\nasdog.check.file <- function(name, type, .bgz=c(\"\", \".bgz\"), .abort=TRUE) {\n  path <- lx.file.resolve(name, list(c(\"\", type), .bgz))\n  if (is.null(path)) {\n    msg <- paste0(type[[1]], ' file \"', name, '\" not found')\n    lx.stopif(.abort, msg, trace=F, up.frame=1)\n    lx.warn(msg, up.frame=1)\n  } else {\n    lx.out('found ', type[[1]], ' file: ', path, up.frame=1)\n  }\n  path\n}\n\n# -------------------------------------------------\n# cleanup suffixes from path\n#\nasdog.clean.path.suffix <- function(path, suffixes, ignore.case=T) {\n  .case <- function(x) if (ignore.case) tolower(x) else x\n  suffixes <- sapply(suffixes, .case)\n  ext <- .case(lx.file.ext(path))\n  while (ext %in% suffixes) {\n    path <- lx.file.no.ext(path)\n    ext <- .case(lx.file.ext(path))\n  }\n  path\n}\n\n# -------------------------------------------------\n# get asdog (or other package) version \n#\nasdog.version <- function(package=\"asdog\", as.string=T) {\n  v <- as.character(packageVersion(package))\n  if (as.string) v else as.integer(lx.strsplit(v, \"\\\\.\"))\n}\n\n# -------------------------------------------------\n# create an asdog object \n#\nasdog.object <- function(classname, ...) {\n  o <- lx.new(c(classname, \"Asdog\"), .version=asdog.version(), ...)\n  lx.info(o$.version) <- \"asdog version number\"\n  o\n}\n\n# -------------------------------------------------\n# funny banner\n#\nasdog.banner <- function() {\n  .cat <- function(...) cat(\"+\", paste0(...), \"\\n\")\n  .catver <- function(x) .cat(x, \" v\", asdog.version(x))\n  vers <- asdog.version()\n  blnk <- paste(rep(\" \", 9 - nchar(vers)), collapse=\"\")\n  .cat()\n  .cat(\"     ,                    ,\\\" e`--o\")\n  .cat(\"    ((                   (  | __,'\")\n  .cat(\"     \\\\\\\\~----------------' \\\\_;/\")\n  .cat(\"     (     ASDOG v\", vers, blnk, \"/\")\n  .cat(\"     /) ._______________.  )\")\n  .cat(\"    (( (               (( (\")\n  .cat(\"     ``-'               ``-'\")\n  .cat(R.version.string)\n  .catver(\"lx\")\n  .catver(\"xlx\")\n  .catver(\"thmm\")\n  .cat()\n  invisible()\n}\n\n\n\n",
    "created" : 1503009678873.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2385575352",
    "id" : "5712DC4B",
    "lastKnownWriteTime" : 1503055231,
    "last_content_update" : 1503055231,
    "path" : "~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/asdog/R/asdog.main.r",
    "project_path" : "R/asdog.main.r",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}