{
    "collab_server" : "",
    "contents" : "# -------------------------------------------------\n# $Id: asdog.gcmodel.report.r 298 2017-08-14 17:56:27Z viari $\n# Asdog: Copy Number Analysis for WGS data\n#\n# GC correction model latex reporting\n#\n\n# -------------------------------------------------\n# <internal> <no-export>\n# produce empty plot\n# -------------------------------------------------\n\n.noplot <- function(label=\"no data\", boxed=TRUE) {\n  plot.new()\n  if (boxed) box()\n  text(0.5, 0.5, label)\n  invisible()\n}\n\n# -------------------------------------------------\n# <internal> <no-export>\n# plot coverage histogram with densities\n#\n# cnt  : counts\n# rng  : plot range\n# pos  : vertical line at cov=pos\n# dsmo : smoothed density or smooth factor\n# bnd  : selected band\n# lgn  : legend on/off\n# -------------------------------------------------\n\n.cover.histo <- function(cnt, rng=range(cnt), pos, dsmo, bnd=NULL, \n                         lgn=FALSE, .mincnt=100) {\n  \n  cnt <- cnt[(cnt != 0) & (cnt >= rng[1]) & (cnt <= rng[2])]\n  \n  if (length(cnt) < .mincnt)\n    return(.noplot(paste0(\"count < \", .mincnt)))\n\n  h <- hist(cnt, breaks=\"FD\", plot=FALSE)\n  d <- lx.density(cnt)\n  \n  if (! (\"density\" %in% class(dsmo)))\n    dsmo <- lx.density(lx.smooth.median(cnt, k=dsmo))\n\n  # histogram  \n  plot(h$mids, h$density, type=\"h\",\n     xlim=rng, ylim=c(0, max(h$density)*1.1),\n     xlab=\"Coverage\", ylab=\"Density\",\n     main=\"\", font.main=1, family=\"Times\")\n  points(h$mids, h$density, type=\"s\")\n  abline(h=0)\n  abline(v=pos, lty=2, lwd=1, col=2)\n  \n  # densities\n  lines(d$x, d$y*max(h$density)/max(d$y), col=1, lwd=2)\n  lines(dsmo$x, dsmo$y*max(h$density)/max(dsmo$y), col=2, lwd=2)\n  \n  # select band and area under band\n  if (! is.null(bnd)) {\n    abline(v=bnd, lty=2, lwd=1, col=3)\n    z <- d$x>=bnd[1] & d$x<=bnd[2]\n    if (any(z)) {\n      x <- d$x[z]\n      y <- d$y[z]\n      polygon(c(min(x), x, max(x)), c(0, y, 0), \n              col=lx.color.alpha(\"blue\", 0.2))\n    }\n  }\n  \n  # legend\n  if (lgn)\n    legend(\"topright\", legend=c(\"obs\", \"smooth\"), \n           cex=0.7, col=c(1, 2), lwd=1)\n\n  invisible()\n}\n\n# -------------------------------------------------\n# <internal> <no-export>\n# plot coverage profile with chr boundaries\n#\n.cover.profile <- function(pos, rcov, model=NULL, ylab=\"\", main=\"\") {\n  lx.plot(pos, rcov,\n          ylim=c(0, 2),\n          xlab=\"pos\", ylab=ylab,\n          main=main, font.main=1, family=\"Times\")\n  abline(h=1, col=2)\n  if (! is.null(model)) {\n    rle <- rle(coords2clocs(model, pos)[,1])\n    csm <- cumsum(rle$lengths)\n    abline(v=pos[csm], col=1)\n    text(x=pos[csm], y=2, rle$values, pos=2, \n         cex=0.5, family=\"Times\")\n  }\n  invisible()\n}\n\n# -------------------------------------------------\n# <internal> <no-export>\n# fit log(y) ~ x with error handling\n#\n.logfit <- function(x, y, .ratio=10) {\n  tryCatch(lm(log10(y + min(y[y>0])/.ratio) ~ x),\n           error=function(e) NULL)\n}\n\n# -------------------------------------------------\n# <internal> <no-export>\n# put text label into plot\n#\n.text <- function(at=c(\"bl\", \"tl\", \"tr\", \"br\"), label, \n                  delta=c(0.05, 0.1), log=\"\", cex=0.8, ...) {\n  at  <- match.arg(at)\n  usr <- par(\"usr\")\n  rng <- diff(usr)[c(1,3)]\n  pos <- switch(at,\n                bl=c(usr[1], usr[3],  1,  1, 4),\n                tl=c(usr[1], usr[4],  1, -1, 4),\n                tr=c(usr[2], usr[4], -1, -1, 2),\n                br=c(usr[2], usr[3], -1,  1, 2))\n  x <- pos[1]+pos[3]*rng[1]*delta[1]\n  y <- pos[2]+pos[4]*rng[2]*delta[2]\n  if (grepl(\"x\", log)) x <- 10^x\n  if (grepl(\"y\", log)) y <- 10^y\n  text(x, y, label, pos=pos[5], cex=cex, \n       family=\"Times\", ...)\n}  \n\n# =================================================\n# API\n# =================================================\n\n# -------------------------------------------------\n#' produce gccor.model tex report \n#\nasdog.tex.report.gcmodel <- function(tex, model) {\n  \n  params <- model$params\n  \n  # -----------------------------------------------\n  # @fixme: there is problem with pdf driver and par()\n  #         the main and labels family is not inherited\n  #         so we do have to set it each time\n  # -----------------------------------------------\n  \n  # -----------------------------------------------\n  # parameters section\n  #\n  \n  p <- asdog.filter.params(params, in.filter=\"gccorrect:\")\n  p <- as.matrix(p, ncol=2)\n  p <- as.data.frame(apply(p, 1, paste))\n  names(p) <- 'value'\n  tex.section(tex, \"Parameters\")\n  tex.print(tex, p, size='small')\n  \n  # -----------------------------------------------\n  # regions section\n  #  \n  if (! is.null(model$regions)) {\n    tex.tag(tex, \"newpage\")\n    tex.section(tex, \"Regions selection\")    \n    tex.subsection(tex, \"Coverage statistics\")\n    \n    bins.pos <- model$regions$binpos\n    bins.bnd <- model$regions$binrange\n    bins.wid <- diff(bins.bnd) * params$gcmodel.regions.plot.alpha\n    bins.rng <- pmax(0, bins.bnd + bins.wid * c(-1, 1))\n    bins.all <- unlist(model$regions$bins, use.names=F)\n    bins.all <- bins.all[bins.all != 0]\n    bins.dsm <- model$regions$smooth.dens\n    bins.smo <- model$regions$smooth.k\n    \n    p <- as.matrix(summary(bins.all))\n    colnames(p) <- \"Coverage\"\n    tex.print(tex, p, size='small')\n    \n    tex.subsection(tex, paste(\"Histogram of coverage in\",\n                              params$gcmodel.regions.binsize/1000,\n                              \"kb regions\"))\n    # fig on\n    #\n    tex <- tex.fig.on(tex, width=4, height=4, family=\"Times\")\n    \n    .cover.histo(bins.all, bins.rng, bins.pos, dsmo=bins.dsm,\n                 bnd=bins.bnd, lgn=T)\n    title(\"all chromosomes\", font.main=1, family=\"Times\")\n    \n    tex <- tex.fig.off(tex)\n    #\n    # fig off\n\n    # -------------------------------\n    # coverage by chromosomes subsection\n    #  \n    tex.subsection(tex, paste(\"Histogram of coverage in\",\n                              params$gcmodel.regions.binsize/1000,\n                              \"kb regions per chromosome\"))\n    bins.splt <- split(model$regions$bins, names(model$regions$bins))\n    bins.splt <- bins.splt[order(as.numeric(names(bins.splt)))]\n    \n    # fig on\n    #\n    tex <- tex.fig.on(tex, width=7, height=7, family=\"Times\")\n    \n    opar <- par(no.readonly=TRUE)\n    par(mfrow=lx.mfrow(length(bins.splt)),\n        mgp = c(3, 0, 0) + 0.2,\n        oma = c(1,1,0,0) + 0.1,\n        mar = c(1,0,2,1) + 0.1)\n    lx.napply(bins.splt, function(chr, bins) {\n      bins <- unlist(bins, use.names=F)\n      .cover.histo(bins, bins.rng, bins.pos, dsmo=bins.smo,\n                   bnd=bins.bnd, lgn=F)\n      title(paste0(\"chr\", chr), font.main=1, family=\"Times\")\n    }, use.threads=F)\n    par(opar)\n    \n    tex <- tex.fig.off(tex)\n    #\n    # fig off\n  }\n  \n  # -----------------------------------------------\n  # sample section\n  #\n  if (! is.null(model$sample)) {\n    \n    # tex.tag(tex, \"newpage\")\n    \n    # -------------------------------\n    # # samples per chromosome\n    #\n    tex.section(tex, \"Sampling\")    \n    \n    tex.subsection(tex, \"Sampled positions per chromosome\")\n    clocs <- coords2clocs(model, model$sample$coords)\n    plot.cnts <- lx.table(clocs[,1], levels=params$chr)\n    plot.pchr <- sapply(names(plot.cnts), function(chr) {\n      seq <- model$header$seq[[chr]]\n      ifelse(is.null(seq), 0, seq$siz)\n    })\n    plot.pchr <- plot.pchr * params$gcmodel.sample.size / sum(plot.pchr)\n    \n    # fig on\n    #\n    tex <- tex.fig.on(tex, width=7, height=3, family=\"Times\")\n    \n    barplot(rbind(plot.cnts, plot.pchr), beside=TRUE,\n            xlab=\"chromosomes\", ylab=\"Frequency\",\n            cex.names=0.7, cex.axis=0.7, \n            main=\"\", font.main=1, family=\"Times\")\n    box()\n    legend(x='topright', legend=c('actual', 'expect.'),\n           fill=grey(c(0, 0.8)), cex=0.8)\n    \n    tex <- tex.fig.off(tex)\n    #\n    # fig off\n    \n    # -------------------------------\n    # correlogram\n    #\n    tex.subsection(tex, \"Sample correlogram\")\n    delta <- diff(sort(model$sample$coords))\n    q90   <- quantile(delta, 0.90)\n    delta <- delta[delta <= q90]\n\n    # fig on\n    #\n    tex <- tex.fig.on(tex, width=4, height=4, family=\"Times\")\n    \n    hd  <- hist(delta, breaks=\"FD\", plot=F)\n    plot(hd$mids, hd$density, log=\"y\",\n         xlab=\"delta (bp)\", ylab=\"log10 density\",\n         main=paste0(\"delta [0, Q90=\", q90, \"] bp\"),\n         cex.main=0.9, font.main=1, family=\"Times\")\n    fit <- .logfit(hd$mids, hd$density)\n    abline(fit, col=2)\n    .text(\"tr\", paste0(\"lambda=\", sprintf(\"%.2f\", -1/fit$coefficients[2])), \n          log=\"y\")\n    \n    tex <- tex.fig.off(tex)\n    #\n    # fig off\n\n        \n    # -------------------------------\n    # sample coverage\n    #\n    tex.subsection(tex, \"Sample coverage\")\n    \n    if (is.null(model$regions)) {\n      bins.pos <- NA\n      bins.bnd <- NULL\n      bins.rng <- range(model$sample$pts$cov)\n      bins.smo <- NULL\n    } else {\n      bins.pos <- model$regions$binpos\n      bins.bnd <- model$regions$binrange\n      bins.wid <- diff(bins.bnd) * params$gcmodel.regions.plot.alpha\n      bins.rng <- pmax(0, bins.bnd + bins.wid * c(-1, 1))\n      bins.smo <- model$regions$smooth.k\n    }\n    \n    # fig on\n    #\n    tex <- tex.fig.on(tex, width=7, height=7, family=\"Times\")\n    \n    opar <- par(no.readonly=TRUE)\n    layout(matrix(c(1,2,3,3), 2, 2, byrow = TRUE))\n    par(cex.main=0.9, cex.axis=0.7, cex.lab=0.7,\n        mgp=c(1.5,0.5,0), mar=c(4,4,1,1))\n    \n    .cover.histo(model$sample$pts$cov, bins.rng, bins.pos, dsmo=bins.smo,\n                 bnd=bins.bnd, lgn=F)\n    .text(\"tr\", paste0(\"median=\", sprintf(\"%.2f\", median(model$sample$pts$cov))))\n    title(\"Coverage\", font.main=1, family=\"Times\")\n    \n    lx.hist(model$sample$pts$gc, br=20, bw=0.01, xlim=c(0, 1), xlab=\"%GC\",\n            col.density=1, freq=F,\n            main=\"%GC\", font.main=1, family=\"Times\")\n    box()\n    .text(\"tr\", paste0(\"median=\", sprintf(\"%.2f\", median(model$sample$pts$gc))))\n    \n    lx.plot(model$sample$pts$gc, model$sample$pts$cov,\n            xlim=c(0,1), ylim=c(0, 2*median(model$sample$pts$cov)),\n            xlab=\"%GC\", ylab=\"Coverage\",\n            main=\"%GC dependency\", font.main=1, family=\"Times\")\n    cor <- cor(model$sample$pts$gc, model$sample$pts$cov)\n    .text(\"tr\", paste0(\"corr=\", sprintf(\"%.2f\", cor)))\n    \n    par(opar)\n    \n    tex <- tex.fig.off(tex)\n    #\n    # fig off\n    \n  }\n\n  # -----------------------------------------------\n  # model section\n  #\n  tex.tag(tex, \"newpage\")\n  tex.section(tex, \"GC Model\")\n  \n  # -------------------------------\n  # optimize GC window\n  #\n  tex.subsection(tex, \"Optimized GC windows\")\n  # fig on\n  #\n  tex <- tex.fig.on(tex, width=4, height=4, family=\"Times\")\n  \n  image(as.numeric(rownames(model$optim$scores)), \n        as.numeric(colnames(model$optim$scores)), \n        log10(model$optim$scores+1e-6),\n        xlab=\"Small window\", ylab=\"Large window\",\n        family=\"Times\",\n        col=heat.colors(20))\n  \n  .grid <- function(x) as.numeric(x)[-1]-diff(as.numeric(x))/2\n  abline(h=.grid(colnames(model$optim$scores)))\n  abline(v=.grid(rownames(model$optim$scores)))\n  \n  points(max(0, model$optim$model$winsize.gc[1], na.rm=T),\n         max(0, model$optim$model$winsize.gc[2], na.rm=T),\n         pch=3, cex=2)\n  \n  title(paste0(\"fit = \", model$optim$info$fit,\n               \" / \", model$optim$info$objective),\n        cex.main=0.9, font.main=1, family=\"Times\")\n  \n  tex <- tex.fig.off(tex)\n  #\n  # fig off\n  \n  # -------------------------------\n  # plot model\n  #\n  tex.subsection(tex, \"GC model\")\n  \n  # fig on\n  #\n  width <- if (model$optim$model$nmodel<=1) 4 else 7\n  tex <- tex.fig.on(tex, width=width, height=4, family=\"Times\")\n  plot(model$optim$model, font.main=1, family=\"Times\")\n  tex <- tex.fig.off(tex)\n  #\n  # fig off\n  \n  # -------------------------------\n  # model prediction on test\n  #\n  tex.subsection(tex, \"Predictions on test set\")\n  \n  # fig on\n  #\n  tex <- tex.fig.on(tex, width=7, height=7, family=\"Times\")\n  \n  opar <- par(no.readonly=TRUE)\n  layout(matrix(c(1,2,3,3,4,4), 3, 2, byrow = TRUE))\n  par(cex.main=1.2, cex.axis=0.7, cex.lab=0.7,\n      mgp=c(1.5,0.5,0), mar=c(4,4,1,1))\n  \n  lx.plot(model$optim$test$gc, \n          model$optim$test$cov/median(model$optim$test$cov, na.rm=T),\n          xlim=c(0.2, 0.8),\n          ylim=c(0, 2),\n          xlab=\"%GC\", ylab=\"rel. cover\",\n          main=\"raw\", font.main=1, family=\"Times\")\n  abline(h=1, col=2)\n  \n  lx.plot(model$optim$test$gc, \n          model$optim$test$cov/model$optim$test$pred,\n          xlim=c(0.2, 0.8),\n          ylim=c(0, 2),\n          xlab=\"%GC\", ylab=\"rel. cover\",\n          main=\"corrected\", font.main=1, family=\"Times\")\n  abline(h=1, col=2)\n  \n  .cover.profile(model$optim$test$pos,\n                 model$optim$test$cov/median(model$optim$test$cov, na.rm=T),\n                 model=model, ylab=\"rel. cover\", main=\"raw\")\n  \n  .cover.profile(model$optim$test$pos,\n                 model$optim$test$cov/model$optim$test$pred,\n                 model=model, ylab=\"rel. cover\", main=\"corrected\")\n  par(opar)\n  \n  tex <- tex.fig.off(tex)\n  #\n  # fig off\n  \n  invisible(tex)\n}\n",
    "created" : 1509656391413.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2448545879",
    "id" : "87F4ABDC",
    "lastKnownWriteTime" : 1502733387,
    "last_content_update" : 1502733387,
    "path" : "~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/asdog/R/asdog.gcmodel.report.r",
    "project_path" : "R/asdog.gcmodel.report.r",
    "properties" : {
    },
    "relative_order" : 15,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}