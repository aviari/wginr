% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xlx.bbaf.r
\name{baf.fetch.points.chr}
\alias{baf.fetch.points.chr}
\title{fetch allele counts}
\usage{
baf.fetch.points.chr(handle, chr, relpts, .chunk.size = 1000000L)
}
\arguments{
\item{handle}{file handle (as returned by \link{baf.open})}

\item{chr}{chromosome index (if integer) or chromosome name (if character)}

\item{relpts}{vector of relative positions (1-based) on this
chromosome}

\item{.chunk.size}{<internal parameter> size of chunk. changing this parameter
will only affect time or memory used, not result.}
}
\value{
integer matrix of size n x 4 containing allele counts.
}
\description{
fetch allele counts at several relative point locations
on the same chromosome.\cr
\code{relpts} is a set of relative \bold{point} positions on the same chromosome.
this function returns a count matrix (with 4 columns) of
the number of symbols at each position.
this formaly equivalent to:\cr
\code{clocs <- lapply(relpts, function(x) c(chrindex, x, x))}\cr
\code{do.call(rbind, lapply(clocs, baf.fetch.cloc, handle=handle))}\cr
but is much quicker when relpts vector is large and values
span most of the chromosome.\cr
The idea is to load the allele
counts by chunks of size \code{.chunk.size} instead of accessing each
location individually (thus reducing disk access overhead).
}
\examples{
baf <- baf.open(lx.system.file("samples/test.baf", "xlx"))
x <- baf.fetch.points.chr(baf, 3, 550:570)
y <- baf.fetch.points.chr(baf, 3, 550:570, .chunk.size=1)
identical(x, y)
baf.close(baf)

}
\seealso{
\link{baf.fetch.cloc}, \link{baf.fetch.coord}
}
