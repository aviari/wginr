% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xlx.basta.r
\name{basta.fetch.points.chr}
\alias{basta.fetch.points.chr}
\title{fetch sequence at several relative point locations}
\usage{
basta.fetch.points.chr(handle, chr, relpts, size = 1L,
  .chunk.size = 1000000L)
}
\arguments{
\item{handle}{file handle (as returned by \link{basta.open})}

\item{chr}{chromosome index (if integer) or chromosome name (if character)}

\item{relpts}{vector of relative positions (1-based) on this
chromosome}

\item{size}{size of sequence to fetch}

\item{.chunk.size}{<internal parameter> size of chunk. changing this parameter
will only affect time or memory used, not result.}
}
\value{
array of character string giving the sequence starting
at each point location.
}
\description{
\code{relpts} s a set of relative \bold{point} positions on the same chromosome.
this function returns sequence of length size starting at each position.
this formaly equivalent to:\cr
\code{clocs <- lapply(relpts, function(x) c(chrindex, x, x+size-1))}\cr
\code{res <- unlist(lapply(clocs, basta.fetch.cloc, handle=handle))}\cr
but is much quicker when relpts vector is large and values
span most of the chromosome.\cr
The idea is to load the chromosome
counts by chunks of size \code{.chunk.size} instead of accessing each
location individually (thus reducing disk access overhead).
}
\examples{
basta <- basta.open(lx.system.file("samples/test.bst", "xlx"))
x <- basta.fetch.points.chr(basta, 1, 1:10)
y <- lx.strsplit(basta.fetch.cloc(basta, c(1,1,10)), "")
identical(x, y)
x <- basta.fetch.points.chr(basta, 1, 15:25, size=10)
basta.close(basta)

}
