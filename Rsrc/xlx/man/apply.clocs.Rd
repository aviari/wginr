% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xlx.apply.r
\name{apply.clocs}
\alias{apply.clocs}
\title{apply function to clocations by chromosomes}
\usage{
apply.clocs(clocations, fun, ..., handle = NULL, flatten = FALSE,
  use.threads = lx.use.threads(), mc.cores = lx.options(mc.cores))
}
\arguments{
\item{clocations}{nx3 matrix of clocations}

\item{fun}{: function or function name called as \code{fun(clocs, handle, ...)} (see details)}

\item{...}{anything passed to \code{fun}}

\item{handle}{optional (basta or baf) file handle. if use.threads==TRUE 
then handle will be properly duplicated thru calls (as with \link{lx.happly})}

\item{flatten}{flatten results and reorder them in the same order as clocations (see details)}

\item{use.threads}{(see \link{lx.use.threads})}

\item{mc.cores}{number of processes (see \link{HELP.LX.OPTIONS})}
}
\value{
a named list of results of \code{fun} (names are \code{as.character(chrindex)})
        or a flattened (unnamed) list if flatten==TRUE (see Details).
}
\description{
split a nx3 matrix of clocations by chromosomes (first column),
and apply user's function to each submatrix in turn.\cr
this is a pivotal function of the XLX library
to split job across chromosomes for multithreading or disk pooling\cr
}
\details{
\code{fun} first argument is a matrix of clocations (on a single chromosome)
\bold{not} a single clocation. see \link{apply.cloc} for this variant.\cr
the \code{flatten} parameter is only meaningful if the results of \code{fun(clocs, handle,...)}
is a list of length exactly equals to nrow(clocs). then all the results will be catenated
and reordered in the same order as in clocations.\cr
be careful with NULL (or empty) elements in results that may be swallowed.\cr
if at least one call to \code{fun} does not meet this criterion, then a warning
is raised and results will not be flattened at all.
(the \link{apply.cloc} version will take care of this).
}
\examples{
fh <- basta.open(lx.system.file("samples/test.bst", "xlx"))
slocs <- c("seq1:1-10", "seq2:2-3", "seq1:15-20")
clocs <- clocations(lapply(slocs, sloc2cloc, handle=fh))
seqs <- apply.clocs(clocs, function(sublocs, handle) {
                       apply(sublocs, 1, basta.fetch.cloc, handle=handle)
                     }, handle=fh, use.threads=TRUE, mc.cores=2)
seqs <- apply.clocs(clocs, function(sublocs, handle) {
                       apply(sublocs, 1, basta.fetch.cloc, handle=handle)
                     }, handle=fh, flatten=TRUE, use.threads=TRUE, mc.cores=2)
basta.close(fh)

}
\seealso{
\link{apply.cloc}
}
