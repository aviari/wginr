% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xlx.bbaf.r
\name{baf.bin.coord}
\alias{baf.bin.coord}
\title{binning coverage or GC content using absolute coordinates}
\usage{
baf.bin.coord(handle, coord, binsize = 10000L, what = c("coverage",
  "gc"), fun = sum, drop = TRUE, na.gc = FALSE, ...,
  .quick = any(sapply(c(sum, mean), identical, fun)) && (!na.gc))
}
\arguments{
\item{handle}{file handle (as returned by \link{baf.open})}

\item{coord}{absolute sequence coordinates (c(absfrom, absto)) (1-based)
or a single position absfrom (this implies absto=absfrom)}

\item{binsize}{size of bins}

\item{what}{what to collect "coverage" or "gc" (may be abrreviated)}

\item{fun}{collect function (e.g. sum, mean, median, user-closure, ...) see details.}

\item{drop}{drop the last element of result if region width is not a muliple
of binsize}

\item{na.gc}{boolean to specify how to handle GC content for positions with
0 coverage. na.gc = TRUE will produce 0/0 = NA and na.gc = FALSE
will produce 0/0 = 0.}

\item{...}{optional arguments to be passed to \code{fun}}

\item{.quick}{use a quicker algorithm (valid for fun=sum or fun=mean only and
na.gc=FALSE) at the expense of memory overhead.}
}
\value{
numeric vector of size n containing binned cover or gc content
}
\description{
\code{coord} defines a region on a chromosome. this function
collects coverage or GC content by bins of width \code{binsize} within the region.
}
\details{
let us note allele.counts the binsize x 4 matrix of alleles counts in each
bin.\cr
if (what=="cover") then fun(coverage) is collected in each bin,\cr
with coverage = rowSums(allele.counts)\cr\cr
if (what=="gc") then fun(gc.line) is collected in each bin,\cr
with gc.line = rowSums(GC.allele.counts) / rowSums(allele.counts).
(with a special treatment of NA's. see below)\cr
Therefore fun=sum will produce the number of GC alleles in bin and 
fun=mean will produce the \%GC. Note that functions other than \code{sum}
or \code{mean} (e.g. \code{median}) are usually meaningless
with what=="gc"\cr\cr
\code{fun} can be any function or user-supplied closure
taking a numerical vector of size n<=binsize as input 
and returning a scalar.\cr
\bold{added in v1.7} if the formal argument of \code{fun} is named
\code{count} then fun argument is an integer matrix of size n<=binsize x 4
as returned by \link{baf.fetch.coord} giving each allele at each position.
As before it should return a numerical scalar.\cr\cr
the \code{na.gc} parameter is intended to handle the special case where
coverage=0 at a position.\cr
Then the computed gc.line at this position is
NA if na.gc=TRUE, and 0 if na.gc=FALSE.\cr
Please note that na.gc=TRUE will disable quick mode.\cr\cr
the \code{drop} parameter handles the last bin when 
region width is not a muliple of binsize.\cr
if drop=TRUE then the last (incomplete) bin is omited.
if drop=FALSE then the last (incomplete) bin is included.
}
\note{
see \link{HELP.COORD} for help on coordinates systems
}
\examples{
baf <- baf.open(lx.system.file("samples/test.baf", "xlx"))
baf.fetch.coord(baf, c(33725, 33730))
# 'fun' usage
baf.bin.coord(baf, c(33725, 33730), 3) # sum
baf.bin.coord(baf, c(33725, 33730), 3, fun=mean)
baf.bin.coord(baf, c(33725, 33730), 3, fun=median)
# 'na.gc' usage
baf.bin.coord(baf, c(33725, 33730), 3, what="gc")
baf.bin.coord(baf, c(33725, 33730), 3, what="gc", na.gc=TRUE)
baf.bin.coord(baf, c(33725, 33730), 3, what="gc", na.gc=TRUE, na.rm=TRUE)
# 'drop' usage
baf.bin.coord(baf, c(33725, 33730), 4)
baf.bin.coord(baf, c(33725, 33730), 4, drop=FALSE)
baf.bin.coord(baf, c(33725, 33730), 10)
baf.bin.coord(baf, c(33725, 33730), 10, drop=FALSE)
baf.close(baf)
}
\seealso{
\link{baf.fetch.coord} \link{baf.bin.cloc}
}
