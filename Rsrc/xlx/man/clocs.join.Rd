% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xlx.coords.r
\name{clocs.join}
\alias{clocs.join}
\title{join clocations}
\usage{
clocs.join(clocations, delta = 0L, minsize = 1L,
  .force.reduce = FALSE, use.threads = lx.use.threads())
}
\arguments{
\item{clocations}{nx3 matrix of relative clocations (1-based)}

\item{delta}{positive or zero integer. the maximal spacing between
two consecutive intervals to be joined.}

\item{minsize}{minimum interval width. all resulting intervals
strictly smaller than \code{minsize} are discarded.}

\item{.force.reduce}{(see details).}

\item{use.threads}{(see \link{lx.use.threads}).}
}
\description{
join consecutive clocations that are separated by at most \code{delta} bp,
compact results and retains intervals above a specified width.
}
\details{
This function joins together consecutive intervals (separated by at most
\code{delta >= 0} bp). It then compacts results to disjoint intervals
and finally retains intervals above a given width.\cr
It is legal to call it with  \code{delta = 0} in order to fusion
overlapping or stricly adjacent intervals. This will produce the most
compact representation of the input set of intervals and is
equivalent to \link{clocs.reduce}.\cr\cr
The function implements two different algorithms.\cr
The first one (shift)
is very efficient if the clocations are (weakly) disjoints
(see \link{clocs.is.disjoint}).\cr
The second algorithm (reduce) does not have this requirement but works more
slowly on the average.\cr
The function will switch to the most appropriate
algorithm by using \link{clocs.is.disjoint}. If you know that the disjoint
condition will \bold{not} be satisfied, you may force the use of the (reduce)
algorithm by using the \code{.force.reduce} parameter.\cr
note that in all cases the result is the same, just the execution time
may vary.\cr
the \code{use.threads} parameter is only active with algorithm (reduce).\cr
Results are always sorted by increasing chromosome index, from and to 
positions (see \link{clocs.sort}).
}
\examples{
clocs <- clocations(c(1,1,10, 1,11,20, 1,20,30, 1,40,50, 1,60,70, 1,70,80, 1,90,100, 2,1,10))
clocs.join(clocs)
clocs.join(clocs, delta=9)
clocs <- clocs.rbind(list(clocs, c(1,1,100)))
clocs.join(clocs)

}
\seealso{
\link{clocs.reduce}
}
