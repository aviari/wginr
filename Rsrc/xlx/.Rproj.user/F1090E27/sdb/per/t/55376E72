{
    "collab_server" : "",
    "contents" : "# -------------------------------------------------\n# $Id: xlx.bed.r 321 2017-08-18 11:10:19Z viari $\n# xlx bed format\n#\n\n# =================================================\n# API\n# =================================================\n\n# -------------------------------------------------\n#' read bed regions from file\n#' @description\n#' read file in bed (0-based) format and return a dataframe\n#' @param filename bed file name\n#' @return nx3 dataframe with colnames: \"chr\" (character) \"from\" (integer), \"to\" (integer)\n#' @note\n#' \\code{from, to} coordinates are 0-based\n#' @seealso \\link{bed2clocs}\n#' @examples\n#' bed <- bed.read(lx.system.file(\"samples/test.bed\", \"xlx\"))\n#' fh <- basta.open(lx.system.file(\"samples/test.bst\", \"xlx\"))\n#' clocs <- bed2clocs(fh, bed)\n#' basta.close(fh)\n#'\nbed.read <- function(filename) {\n\n    lx.out(\"  reading bed lines: \", filename)\n    bed <- read.table(filename, header=FALSE,\n                                stringsAsFactors=FALSE,\n                                col.names=.xlx.colnames(),\n                                colClasses=c(\"character\", \"integer\", \"integer\"))\n    lx.out(\"  read \", nrow(bed), \" bed regions\")\n    bed\n}\n\n# -------------------------------------------------\n#' convert bed regions to matrix of clocations\n#' @description\n#' see \\link{HELP.COORD} for help on coordinates systems\n#' @param handle basta/baf file handle (as returned by \\link{basta.open}\n#' or \\link{baf.open}\n#' @param bed dataframe (as returned by \\link{bed.read})\n#' @param check check that boundaries are correct\n#' @return a nx3 matrix of (1-based) clocations\n#' @examples\n#' bed <- bed.read(lx.system.file(\"samples/test.bed\", \"xlx\"))\n#' fh <- basta.open(lx.system.file(\"samples/test.bst\", \"xlx\"))\n#' clocs <- bed2clocs(fh, bed)\n#' basta.close(fh)\n#'\nbed2clocs <- function(handle, bed, check=TRUE) {  # check\n    #\n    # internal warning\n    #\n    .warn <- function(n0, n1, what, message) {\n        lx.warnif(n0 != n1, what, \" \", n0-n1, \"/\", n0,\n                        \"=\", round((n0-n1)*100/max(n0,1)),\n                        \"% rows \", message,\n                        up.frame=1)\n    }\n    #\n    # make sure bed$chr is correctly formatted\n    #\n    storage.mode(bed$chr) <- \"character\"\n\n    #\n    # transform seq name -> seq index\n    #\n    lx.out(\"  transforming bed chrname to index\")\n\n    n0 <- nrow(bed)\n    seq.index <- sapply(handle$header$seq, function(x) x$index, USE.NAMES=TRUE)\n    seq.names <- unique(names(seq.index))\n    bed.names <- unique(bed$chr)\n    val.names <- intersect(seq.names, bed.names)\n    bed <- bed[bed$chr %in% val.names,]\n    .warn(n0, nrow(bed), \"removed\", \"with invalid chr names\")\n    chrindex <- seq.index[bed$chr]\n\n    if (nrow(bed) == 0)\n      return(clocs.matrix(bed))\n\n    #\n    # more check\n    #\n    if (check) {\n        lx.out(\"  checking boundaries\")\n        n0 <- nrow(bed)\n        #\n        # for compatibilty with version < 1.6\n        # where header$sizes was absent\n        #\n        if (is.null(handle$header$sizes))\n          handle$header$sizes <- sapply(handle$header$seq, function(x) x$size)\n        #\n        # check from >= 0 and from <= to and from <= size\n        #\n        sizes <- handle$header$sizes[bed$chr]\n        valid <- (bed$from >= 0) & (bed$from <= bed$to) & (bed$from <= sizes)\n        bed <- bed[valid,]\n        chrindex <- chrindex[valid]\n        .warn(n0, nrow(bed), \"removed\", \"with invalid boundaries\")\n        \n        if (nrow(bed) == 0)\n          return(clocs.matrix(bed))\n        #\n        # check to <= size\n        #\n        sizes <- handle$header$sizes[bed$chr]\n        over <- (bed$to > sizes)\n        bed$to[over] <- sizes[over]\n        .warn(n0, n0-sum(over), \"truncated\", \"with invalid boundaries\")\n    }\n\n    if (nrow(bed) == 0)\n      return(clocs.matrix(bed))\n\n    #\n    # shape up\n    #\n\n    bed$from <- bed$from + 1L   # 1-based\n    bed$chr <- chrindex\n    \n    clocs.matrix(bed)\n}\n\n",
    "created" : 1501925694584.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3816757897",
    "id" : "55376E72",
    "lastKnownWriteTime" : 1503054619,
    "last_content_update" : 1503054619,
    "path" : "~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/xlx/R/xlx.bed.r",
    "project_path" : "R/xlx.bed.r",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}