% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/thmm.simul.r
\name{thmm.simulate}
\alias{thmm.simulate}
\title{simulate hidden markov process}
\usage{
thmm.simulate(hmm, npts, with.values = TRUE, log = FALSE, .random = NULL,
  .seed = NA)
}
\arguments{
\item{hmm}{DTHmm model (from \link{thmm.init})}

\item{npts}{number of points to simulate}

\item{with.values}{logical also compute observed values (see details)}

\item{log}{(if \code{with.values=TRUE}) compute log of values}

\item{.random}{name of random generation function (see details).}

\item{.seed}{if not NA set random seed before generation}
}
\value{
if \code{with.values=FALSE} integer vector of simulated states.
if \code{with.values=TRUE} a list of two vectors \code{states} and \code{values}.
}
\description{
generate states and observations vectors following a
discrete time HMM
}
\details{
if \code{with.values=TRUE} then the random generation function used
to produce values from states is \code{'(d->r)ensity'} i.e. the name of density
probability function with first letter (usually a 'd') replaced by a 'r'.
(e.g. if \code{density=dnorm} then the random function is \code{rnorm})
this can be overriden by using the \code{.random} parameter.\cr
This function has the following form:\cr
\code{random(n, ...)} where \code{...} are the same parameters as \code{density}.\cr
In contrast to \code{density}, the generation function does not need to be vectorized
on parameters nor \code{n} (actually it is always called with \code{n=1} and individual
state parameters).
}
\note{
neither \code{states} not \code{values} are deterministic, you should
call \link{set.seed} to produce reproducible vectors.

for multivariate HMM, the result is a list of (numeric) tuples (one
tuple element per each random variable). See examples in \link{thmm}
for details.
}
\examples{
hmm <- thmm.init(dnorm, 0.1, mean=c(-1,1), sd=0.1)
set.seed(0)
thmm.simulate(hmm, 10, log=TRUE)


}
