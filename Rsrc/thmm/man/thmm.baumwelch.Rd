% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/thmm.baumwelch.r
\name{thmm.baumwelch}
\alias{thmm.baumwelch}
\title{Baum-Welch algorithm}
\usage{
thmm.baumwelch(hmm0, obs, ctrl = thmm.bw.ctrl(hmm0), .mstep, .useC = TRUE)
}
\arguments{
\item{hmm0}{a starting DTHmm (see \link{thmm.init})}

\item{obs}{numerical vector of observations}

\item{ctrl}{a list of control settings obtained by \link{thmm.bw.ctrl}}

\item{.mstep}{function name of the mstep function (see details)}

\item{.useC}{logical if TRUE (default) use C code else use R code}
}
\value{
a named list of three elements:
\itemize{
\item hmm : optimized hmm
\item info : information about the iterative process
\item loglike : final log-likelihood
}
}
\description{
HMM parameters estimation using the Baum-Welch algorithm
}
\details{
the Baum-Welch EM algorithm iteratively alternates two steps: the \bold{E-step}
and the \bold{M-step}. The \bold{E-step} (expectation) is distribution independent
and is performed by the \link{thmm.estep} function. The \bold{M-step} (maximisation)
is distribution dependent and you should provide a distribution specific function
to perform it. The name of this function is \code{mstep.<density>}
(e.g. \code{mstep.dnorm} for a gaussian distribution) unless you provide another
name as the \code{.mstep} parameter.
Default function is provided for \code{dnorm} (may
be extended in the future). Have a look at \link{mstep.dnorm} for an example
of function format.\cr
you may control which hmm parameters are actually optimized with
\code{ctrl}. see \link{thmm.bw.ctrl}.
}
\examples{
# reference hmm
hmm <- thmm.init(dnorm, 0.1, mean=c(-1,1), sd=0.1)
obs <- thmm.simulate(hmm, n=1000, .seed=0)

# this one converge to the correct solution
hmm0 <- thmm.init(dnorm, 0.1, mean=c(0,5))
bw   <- thmm.baumwelch(hmm0, obs$values)

# but not that one
hmm0 <- thmm.init(dnorm, 0.1, mean=c(0,10))
bw   <- thmm.baumwelch(hmm0, obs$values)

# so adding constraints: no update of trans nor init
hmm0 <- thmm.init(dnorm, 0.1, mean=c(0,10))
ctrl <- thmm.bw.ctrl(hmm0, do.trans=FALSE, do.init=FALSE, verbose=TRUE)
bw   <- thmm.baumwelch(hmm0, obs$values, ctrl)

# that one do not converge either to proper solution
hmm0 <- thmm.init(dnorm, 0.1, mean=c(0,0), sd=0.5)
bw   <- thmm.baumwelch(hmm0, obs$values)

# adding constraints: mean bounds
hmm0 <- thmm.init(dnorm, 0.1, mean=c(0,0), sd=0.5)
ctrl <- thmm.bw.ctrl(hmm0, lower.mean=c(-2,0), upper.mean=c(0,2), verbose=TRUE)
bw   <- thmm.baumwelch(hmm0, obs$values, ctrl)

# adding constraint: as as previous but more general form
hmm0 <- thmm.init(dnorm, 0.1, mean=c(0,0), sd=0.5)
myconst <- function(params) {
  params$mean <- pmax(pmin(params$mean, c(0,2)), c(-2,0))
  params
}
ctrl <- thmm.bw.ctrl(hmm0, constraint=myconst, verbose=TRUE)
bw   <- thmm.baumwelch(hmm0, obs$values, ctrl)

}
