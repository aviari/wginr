{
    "collab_server" : "",
    "contents" : "#\n# additional manual tests : binormal (with baum-welch)\n#\n\nif (FALSE) {\n\n  require(thmm)\n\n  #\n  # binormal density function\n  #\n  dbinorm <- function(x, mean=1, sd=1, log=FALSE) {\n    ms <- mapply(function(m, s) list(mean=m, sd=s), mean, sd, SIMPLIFY=F)\n    res <- if (log) {\n      lapply(x, function(x) sapply(ms, function(p) {\n        pp <- c(dnorm(x, p$mean, p$sd, log=T), dnorm(x, -p$mean, p$sd, log=T))\n        mp <- max(pp)\n        mp + base::log(sum(exp(pp-mp)))\n      }))\n    } else {\n      lapply(x, function(x) sapply(ms, function(p)\n        dnorm(x, p$mean, p$sd, log=F) + dnorm(x, -p$mean, p$sd, log=F)))\n    }\n    unlist(res)\n  }\n\n  #\n  # binormal random generation function\n  #\n  rbinorm <- function(n, mean=1, sd=1) {\n    .cycle <- function(x, k) head(rep(x, k), k)\n    m <- max(n, length(mean), length(sd))\n    mean <- .cycle(mean, m) * sample(c(-1,1), m, replace=T)\n    rnorm(n, mean=mean, sd=sd)\n  }\n\n  #\n  # binormal Mstep\n  #\n  mstep.dbinorm <- function(obs, cond, ctrl, mean=1, sd=1) {\n    .def <- function(sym) (is.null(sym)) || sym\n    .colSums <- function(mat) rowSums(t(mat))\n\n    n <- length(obs)\n    m <- ncol(cond$u)\n\n    if (.def(ctrl$do.mean)) {\n      mu <- matrix(sapply(c(-1,1), function(sgn) {\n        ccu <- cond$u * mapply(function(m,s) dnorm(obs, sgn*m, s), mean, sd)\n        (matrix(obs, nrow=1) %*% ccu) / .colSums(ccu)\n      }), nrow=m, ncol=2)\n      nmean <- (mu[,2]-mu[,1])/2\n      lmean <- list(mean=nmean)\n    }\n    else {\n      nmean = mean\n      lmean <- list(mean=mean)\n    }\n\n    if (.def(ctrl$do.sd)) {\n      mobs <- matrix(obs, nrow=n, ncol=m)\n      pvar <- (mobs - matrix(nmean, nrow=n, ncol=m, byrow=T))^2\n      mvar <- (mobs - matrix(-nmean, nrow=n, ncol=m, byrow=T))^2\n      var <- pmin(pvar, mvar) * cond$u\n      var <- pmax(.colSums(var) / .colSums(cond$u), .Machine$double.eps)\n      lsd   <- list(sd=sqrt(var))\n    } else if (missing(sd))\n      lsd <- list()\n    else\n      lsd <- list(sd=sd)\n\n    c(lmean, lsd)\n  }\n\n  ##\n  ## test\n  ##\n\n  hmm <- thmm.init(dbinorm, 0.1, mean=c(0, 2), sd=c(0.1, 0.1))\n  set.seed(1)\n  obs <- thmm.simulate(hmm, 100)\n\n  plot(obs$values)\n  lines(2*(obs$states-1), col=3, lwd=2)\n\n  hmm0 <- thmm.init(dbinorm, 0.1, mean=c(0.05, 5), sd=c(1,1))\n  vt0 <- thmm.viterbi(hmm0, obs$values)\n  lines(2*(1-vt0$states), col=4)\n\n  ctrl <- thmm.bw.ctrl(hmm0, verbose=T, do.trans=F, do.init=F)\n  bw <- thmm.baumwelch(hmm0, obs$values, ctrl, .useC=T)\n  vt <- thmm.viterbi(bw$hmm, obs$values)\n  lines(2*(1-vt$states), col=2, lty=2, lwd=2)\n}\n",
    "created" : 1498899292097.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1162530949",
    "id" : "72AABAC2",
    "lastKnownWriteTime" : 1498914557,
    "last_content_update" : 0,
    "path" : "~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/thmm/R/tests/test.binormal.r",
    "project_path" : "R/tests/test.binormal.r",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}