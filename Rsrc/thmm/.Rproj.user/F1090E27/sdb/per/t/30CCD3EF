{
    "collab_server" : "",
    "contents" : "# -------------------------------------------------\n# $Id: $\n# tinyhmm : internal utilities\n# all these functions are internal - not exported\n#\n\n# -------------------------------------------------\n# <internal> check if e is an error\n#\n.is.error <- function(e) \"error\" %in% class(e)\n\n# -------------------------------------------------\n# <internal> stop on error\n#\n.stopif <- function(test, ...) if (test) stop(...)\n\n# -------------------------------------------------\n# <internal> iota function\n#\n.iota  <- function(n) seq.int(length.out=max(0, n))\n\n# -------------------------------------------------\n# <internal> recycle vector\n#\n.cycle <- function(x, n) head(rep(x, n), n)\n\n# -------------------------------------------------\n# <internal> create new object\n#\n.new <- function(classname, ...) {\n  obj <- list(...)\n  class(obj) <- c(classname, class(obj))\n  obj\n}\n\n# -------------------------------------------------\n# column sums of matrix\n# same as apply(mat, 2, sum) but twice quicker\n#\n.colSums <- function(mat) rowSums(t(mat))\n\n# -------------------------------------------------\n# <internal> get function actual arguments\n# pos : index of argument(s) to extract (starts at 1 with function name)\n# up.frame : number of frame to go up to get caller\n#\n.args <- function(pos=NULL, up.frame=0L) {\n  if ((sys.nframe() - up.frame) < 2) # called from top level\n    return(NULL)\n\n  parent <- sys.parent(up.frame+1)\n  def    <- sys.function(parent)\n  cal    <- sys.call(parent)\n\n  # trouble when called within a lambda expression [fixme]\n  args <- as.list(tryCatch(\n                    match.call(definition=def, call=cal),\n                    error=function(e) \"closure\"))\n\n  if (is.null(pos)) args else args[pos]\n}\n\n# -------------------------------------------------\n# <internal> printout debug information on stderr\n#\n.out <- function(..., with.mem=FALSE, with.caller=TRUE, up.frame=0L) {\n\n  mem <- if (with.mem) paste0(\"[\", format(sum(gc()[,2]), nsmall=1), \" Mb] \")\n         else \"\"\n\n  cal <- if (with.caller) {\n    caller <-.args(1, up.frame=up.frame+1)[[1]]\n    caller <- if (is.null(caller)) \"top-level\"\n    else if (typeof(caller) == \"closure\") \"closure\"\n    else paste(as.character(caller), collapse=\":\")\n    paste0(\"[\", caller, \"] \", collapse=\"\")\n  } else \"\"\n\n  args <- paste0(as.character(list(...)), collapse=\"\")\n\n  cat(paste0(\"+ [\", date(), \"]\\t\", cal, args, \" \", mem, \"\\n\"),\n      file=stderr())\n\n  flush(stderr())\n\n  invisible()\n}\n\n# -------------------------------------------------\n# <internal> make transition matrix from constant or vector\n#\n.transmat <- function(p, m) {\n  p <- pmin(1, pmax(0, p))\n  if (length(p) == 1) {\n    x <- matrix(p, nrow=m, ncol=m)\n    diag(x) <- 1 - (m-1)*p\n  } else {\n    p <- .cycle(p, m)\n    x <- matrix(1-p, nrow=m, ncol=m)\n    diag(x) <- (m-1)*p\n    x <- x / rowSums(x)\n  }\n  x\n}\n\n# -------------------------------------------------\n# <internal> compute log(density(obs))\n# the first form is much quicker but assume that density\n# accepts a vector as first argument\n#\n.logdens <- function(hmm, obs) {\n  if (hmm$info$vectorized) {\n    res <- lapply(hmm$info$sargs, function(arg)\n      do.call(hmm$info$density, c(list(obs), arg, log=TRUE), envir=hmm$info$env))\n    do.call(cbind, res)\n  } else {\n    matrix(unlist(lapply(obs, hmm$density, log=TRUE)), ncol=nrow(hmm$trans), byrow=TRUE)\n  }\n}\n\n# -------------------------------------------------\n# <internal> marginal distribution of stationary Markov chain\n#\n.marginprob <- function(trans) {\n  m <- ncol(trans)\n  a <- t(trans) - diag(1, m, m)\n  a[m,] <- 1\n  b <- c(rep(0, (m - 1)), 1)\n  solve(a, b)\n}\n",
    "created" : 1502889131340.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2962511139",
    "id" : "30CCD3EF",
    "lastKnownWriteTime" : 1495375219,
    "last_content_update" : 1495375219,
    "path" : "~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/thmm/R/thmm.internals.r",
    "project_path" : "R/thmm.internals.r",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}