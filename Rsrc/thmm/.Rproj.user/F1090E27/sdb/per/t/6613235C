{
    "collab_server" : "",
    "contents" : "# -------------------------------------------------\n# $Id: $\n# tinyhmm : simulation\n#\n\n# -------------------------------------------------\n#' simulate hidden markov process\n#' @description generate states and observations vectors following a\n#' discrete time HMM\n#' @param hmm DTHmm model (from \\link{thmm.init})\n#' @param npts number of points to simulate\n#' @param with.values logical also compute observed values (see details)\n#' @param log (if \\code{with.values=TRUE}) compute log of values\n#' @param .random name of random generation function (see details).\n#' @param .seed if not NA set random seed before generation\n#' @return if \\code{with.values=FALSE} integer vector of simulated states.\n#' if \\code{with.values=TRUE} a list of two vectors \\code{states} and \\code{values}.\n#' @details if \\code{with.values=TRUE} then the random generation function used\n#' to produce values from states is \\code{'(d->r)ensity'} i.e. the name of density\n#' probability function with first letter (usually a 'd') replaced by a 'r'.\n#' (e.g. if \\code{density=dnorm} then the random function is \\code{rnorm})\n#' this can be overriden by using the \\code{.random} parameter.\\cr\n#' This function has the following form:\\cr\n#' \\code{random(n, ...)} where \\code{...} are the same parameters as \\code{density}.\\cr\n#' In contrast to \\code{density}, the generation function does not need to be vectorized\n#' on parameters nor \\code{n} (actually it is always called with \\code{n=1} and individual\n#' state parameters).\n#' @note neither \\code{states} not \\code{values} are deterministic, you should\n#' call \\link{set.seed} to produce reproducible vectors.\n#' @note for multivariate HMM, the result is a list of (numeric) tuples (one\n#' tuple element per each random variable). See examples in \\link{thmm}\n#' for details.\n#' @examples\n#' hmm <- thmm.init(dnorm, 0.1, mean=c(-1,1), sd=0.1)\n#' set.seed(0)\n#' thmm.simulate(hmm, 10, log=TRUE)\n#'\n#'\nthmm.simulate <- function(hmm, npts, with.values=TRUE, log=FALSE, .random=NULL, .seed=NA) {\n  m <- nrow(hmm$trans)\n\n  if (! is.na(.seed)) set.seed(.seed)\n\n  s0 <- sample(m, 1, prob=hmm$init)\n  states <- head(Reduce(function(s, i) sample(m, 1, prob=hmm$trans[s,]),\n                        seq.int(length.out=npts), init=s0, accumulate=T), -1)\n\n  if (with.values) {\n    rfun <- if (is.null(.random)) sub(\"^.\", \"r\", hmm$info$density)\n    else .random\n    args <- thmm.parameters(hmm)$args\n    values <- sapply(states, function(i) do.call(rfun, c(1, args[[i]]), envir=hmm$info$env))\n    list(states=states, values=values)\n  } else\n    states\n}\n",
    "created" : 1502889243536.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3886499692",
    "id" : "6613235C",
    "lastKnownWriteTime" : 1498860127,
    "last_content_update" : 1498860127,
    "path" : "~/Developpements/SvnProjects/WGInR_Asdog/Rsrc/thmm/R/thmm.simul.r",
    "project_path" : "R/thmm.simul.r",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}